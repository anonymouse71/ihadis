<?php

namespace Ihadis\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * HadithRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HadithRepository extends EntityRepository
{
    /**
     * Get Hadiths by Section
     */
    public function getBySectionId($sectionId)
    {
        $result = $this->createQueryBuilder('h')
                    ->where('h.section = :section')
                    ->setParameter('section', $sectionId)
                    ->orderBy('h.numberPrimary', 'asc')
                    ->getQuery()
                    ->getResult();

        return $result;
    }

    public function getDetailedTree($book, $chapter = null, $section = null, $hadis = null)
    {
        $qb = $this->_em->createQueryBuilder()
                        ->select('b, c, s, h')
                        ->from('IhadisCoreBundle:Book', 'b')
                        ->leftJoin('b.chapters', 'c')
                        ->leftJoin('c.sections', 's')
                        ->leftJoin('s.hadiths', 'h')
                        //->leftJoin('h.validity', 'v')
                        ->where('b.id = :bookId')
                        ->orderBy('c.number', 'ASC')
                        ->addOrderBy('s.sortOrder', 'ASC')
                        ->addOrderBy('h.numberPrimary', 'ASC')
                        ->setParameter(':bookId', $book);

        if(! is_null($chapter)) {
            $qb->andWhere('c.number = :chapter')->setParameter(':chapter', $chapter);
        }
        if(! is_null($section)) {
            $qb->andWhere('s.id = :section')->setParameter(':section', $section);
        }
        if(! is_null($hadis)) {
            $qb->andWhere('h.numberPrimary = :hadis')->setParameter(':hadis', $hadis);
        }

        return $qb->getQuery()->getResult();
    }

    public function replaceWords($word, $replacement, $book, $chapter, $lang = 'bn')
    {
        $conn = $this->_em->getConnection();
        $query = "UPDATE hadiths SET body = REPLACE(body, '$word', '$replacement')";
        if($chapter != 'all') {
            $query .= " WHERE chapter_id = $chapter";
        }
        $num_rows_effected = $conn->exec($query);

        return $num_rows_effected;
    }

    /**
     * Get Hadiths by Section
     */
    public function search($keyword, $page, $perPage)
    {
        $first = ($page - 1) * $perPage;
//        var_dump($page, $first, $perPage);
//        die("\n Died in " . __FILE__ . " at line " . __LINE__);
        $query = $this->createQueryBuilder('h');
        $result = $this->_buildSerach($query, $keyword)
            ->orderBy('h.numberPrimary', 'asc')
            ->setFirstResult($first)
            ->setMaxResults($perPage)
            ->getQuery()
            ->getResult();

        $countQuery = $this->createQueryBuilder('h');
        $countQuery->resetDQLPart('select')
            ->addSelect($countQuery->expr()->countDistinct('h.id') . ' AS total');

        $count = $this->_buildSerach($countQuery, $keyword)
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleResult();

        return array($result, $count['total']);
    }

    private function _buildSerach(QueryBuilder $qb, $keyword)
    {
        return $qb
            ->distinct(true)
            ->join('h.translations', 't')
            ->where('h.body LIKE :keyword')
            ->orWhere('t.body LIKE :keyword')
            ->setParameter('keyword', "%$keyword%");
    }
}